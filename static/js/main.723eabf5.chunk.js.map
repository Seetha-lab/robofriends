{"version":3,"sources":["reducers.js","components/Searchbox.js","components/Robocard.js","components/Robocardlist.js","components/Scroll.js","components/ErrorBoundry.js","container/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialstateSearch","searchval","initialstaterobots","isPending","robots","error","Searchbox","searchfunction","className","type","placeholder","onChange","Robocard","props","src","id","alt","name","email","Robocardlist","map","user","i","key","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onfetchrobots","onsearchfunction","filteredrobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.723eabf5.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED }  from './constants';\n\nconst initialstateSearch = {\n    searchval: ''\n}\n\nexport const searchRobots = (state=initialstateSearch, action={}) => {\n    switch(action.type)\n    {\n    case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchval: action.payload});\n    default:\n        return state;\n    }\n\n\n}\n\nconst initialstaterobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialstaterobots, action={}) => {\n    switch(action.type)\n    {\n    case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, {robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, {error: action.payload, isPending: false});\n    default:\n        return state;\n    }\n\n\n}\n\n","import React from 'react';\n\nconst Searchbox = ({searchfunction}) => {\n          return (\n            <div  className=\"pa2\">\n            <input \n            className= \"tc pa2 ba b--green bg-light-blue\"\n            type=\"search\" \n            placeholder=\"search robot\"\n            onChange={searchfunction}\n            />\n            </div>\n\n\n        );\n    }\n\nexport default Searchbox;","import React from 'react';\n\nconst Robocard = (props) => {\n        return (\n            \n                   <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                    <img src={`https://robohash.org/${props.id}?bgset=any`} alt={props.id} />\n                    <div>\n                    <h2>{props.name}</h2>\n                    <p>{props.email}</p>\n                    </div>\n                    </div>\n       \n          );\n    }\n\nexport default Robocard;","import React from 'react';\nimport Robocard from './Robocard';\n\nconst Robocardlist = ({robots}) => {\n       return(\n           <div>\n            {\n               robots.map((user,i) => { \n                return ( <Robocard \n                key={robots[i].id} \n                id={robots[i].id} \n                name={robots[i].name} \n                email={robots[i].email}/>\n                )\n               })\n            }\n            </div>  \n        );\n  }\n\nexport default Robocardlist;","import React from 'react';\n\nconst Scroll = (props) => {\n\n    return (\n        <div style={{overflowY: 'scroll', border: '2px solid #3fe2e2', height: '600px' }}>\n            {props.children}\n        </div>\n\n    )\n\n}\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n        hasError: false\n        }\n    }\n\n    componentDidCatch (error,info) {\n        this.setState({hasError : true})\n    }\n\n    render() {\n        return this.state.hasError ? (\n            <div>\n                <h1>Sorry! Problem in page laoding!!</h1>\n            </div>\n        ) :\n        ( this.props.children )\n                   \n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport Searchbox from '../components/Searchbox';\nimport Robocardlist from '../components/Robocardlist';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport 'tachyons';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStatetoProps = (state) => {\n return { \n   searchval: state.searchRobots.searchval ,\n   robots: state.requestRobots.robots,\n   isPending: state.requestRobots.isPending,\n   error: state.requestRobots.error\n\n  } \n}\n\nconst mapDispatchtoProps = (dispatch) => {\n return {\n  onsearchfunction: (event) => dispatch(setSearchField(event.target.value)),\n  onfetchrobots: () => dispatch(requestRobots())\n }\n}\n\nclass App extends Component {\n    \n  componentDidMount() {\n    this.props.onfetchrobots();\n  }\n\n \n\n  render() {\n    const { searchval, onsearchfunction, robots, isPending } = this.props;\n    const filteredrobots = robots.filter( robot => {\n      return robot.name.toLowerCase().includes(searchval.toLowerCase());\n       });\n\n    return isPending === true ?  (\n\n         <div className=\"tc\">\n          <h1>RoboFriends</h1>\n          <ErrorBoundry>\n          <Searchbox searchfunction={onsearchfunction}/>\n          </ErrorBoundry>\n          <h1>LOADING...</h1>\n        </div>\n            \n    ) :\n        (\n      \n          <div className=\"tc\">\n          <h1>RoboFriends</h1>\n          <Searchbox searchfunction={onsearchfunction}/>\n           <Scroll>\n             <ErrorBoundry>\n              <Robocardlist robots={filteredrobots}/>\n            </ErrorBoundry>\n          </Scroll>\n          </div>\n          \n     \n        )\n\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App);\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED }  from './constants';\n\nexport const setSearchField = (text) => {\n return{\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch( { type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {return response.json()})\n        .then (data => {dispatch( { type: REQUEST_ROBOTS_SUCCESS, payload: data })})\n        .catch (error => {dispatch( { type: REQUEST_ROBOTS_FAILED, payload: error })})\n\n}\n\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots} from './reducers';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <Provider store={store}>\n      <App/>\n      </Provider>\n    \n    </div>\n    \n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}